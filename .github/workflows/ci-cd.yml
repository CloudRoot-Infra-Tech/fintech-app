permissions:
  id-token: write
  contents: read

name: CI-CD Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'prod'
        type: choice
        options: [dev, qa, uat, prod]
      image_tag:
        description: 'Docker Image Tag (e.g., 1.0.0)'
        required: false

  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-2
  # Fallback if account-id secrets are absent (still overridden by STS below)
  AWS_ACCOUNT_ID: 248189908663
  ECR_REPO: fintech-app

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: self-hosted
    timeout-minutes: 60
    outputs:
      image-tag: ${{ steps.set-tag.outputs.image-tag }}

    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: |
          source /etc/profile.d/maven.sh || true
          mvn clean package -DskipTests

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=fintech-app
            -Dsonar.projectName='fintech-app'
            -Dsonar.sources=.
            -Dsonar.java.binaries=target/classes

      - name: Set Image Tag
        id: set-tag
        run: |
          TAG=${{ github.event.inputs.image_tag }}
          if [ -z "$TAG" ]; then
            TAG=$(date +%Y%m%d%H%M%S)
            echo "Generated unique image tag: $TAG"
          else
            echo "Using provided image tag: $TAG"
          fi
          echo "image-tag=$TAG" >> "$GITHUB_OUTPUT"

      # Moved up so STS is available to resolve account ID if secrets are missing
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Resolve Environment Config (with STS fallback)
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          ENV="${{ github.event.inputs.environment || 'prod' }}"

          # Prefer per-env secrets if present
          case "$ENV" in
            dev)  ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID_DEV }}";;
            qa)   ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID_QA }}";;
            uat)  ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID_UAT }}";;
            prod) ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID_PROD }}";;
            *) echo "Unknown environment: $ENV"; exit 1;;
          esac

          # Fallback to STS (requires AWS creds configured above)
          if [ -z "${ACCOUNT_ID:-}" ]; then
            echo "No per-env AWS Account ID secret set for ENV=$ENV. Falling back to STS‚Ä¶"
            ACCOUNT_ID="$(aws sts get-caller-identity --query Account --output text || true)"
          fi

          # Final fallback to env var if STS failed (e.g., offline)
          if [ -z "${ACCOUNT_ID:-}" ]; then
            ACCOUNT_ID="${AWS_ACCOUNT_ID:-}"
          fi

          # Validate we have a 12-digit account ID
          if ! [[ "${ACCOUNT_ID:-}" =~ ^[0-9]{12}$ ]]; then
            echo "‚ùå Could not determine a valid AWS Account ID for ENV=$ENV."
            echo "   Set secrets AWS_ACCOUNT_ID_${ENV^^} or ensure AWS creds are valid for STS."
            exit 1
          fi

          echo "env-name=$ENV" >> "$GITHUB_OUTPUT"
          echo "account-id=$ACCOUNT_ID" >> "$GITHUB_OUTPUT"
          echo "Resolved AWS Account ID: $ACCOUNT_ID"

      - name: Login to AWS ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS --password-stdin ${{ steps.resolve.outputs.account-id }}.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG=${{ steps.set-tag.outputs.image-tag }}
          ACCOUNT_ID=${{ steps.resolve.outputs.account-id }}
          IMAGE_URI=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$IMAGE_TAG
          echo "üî® Building Docker image: $IMAGE_URI"
          docker build -t $IMAGE_URI .
          echo "üì§ Pushing Docker image..."
          docker push $IMAGE_URI

      - name: Clean Up Local Docker Images
        if: always()
        run: |
          IMAGE_TAG=${{ steps.set-tag.outputs.image-tag }}
          ACCOUNT_ID=${{ steps.resolve.outputs.account-id }}
          IMAGE_URI=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$IMAGE_TAG
          echo "üßπ Cleaning up Docker image: $IMAGE_URI"
          docker rmi -f $IMAGE_URI || true
          docker image prune -af --filter "until=24h" || true
          docker container prune -f || true
          docker volume prune -f || true

      - name: Notify Slack (‚úÖ Build Success)
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"‚úÖ *Build Succeeded* by `${{ github.actor }}` in `${{ steps.resolve.outputs.env-name }}`."}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack (‚ùå Build Failed)
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"‚ùå *Build Failed* by `${{ github.actor }}` in `${{ github.event.inputs.environment || 'prod' }}`."}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy:
    name: Deploy to EKS
    runs-on: self-hosted
    needs: build-and-push

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Resolve Environment Config (with STS fallback)
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          ENV="${{ github.event.inputs.environment || 'prod' }}"

          case "$ENV" in
            dev)  ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID_DEV }}";;
            qa)   ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID_QA }}";;
            uat)  ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID_UAT }}";;
            prod) ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID_PROD }}";;
            *) echo "Unknown environment: $ENV"; exit 1;;
          esac

          if [ -z "${ACCOUNT_ID:-}" ]; then
            echo "No per-env AWS Account ID secret set for ENV=$ENV. Falling back to STS‚Ä¶"
            ACCOUNT_ID="$(aws sts get-caller-identity --query Account --output text || true)"
          fi

          if [ -z "${ACCOUNT_ID:-}" ]; then
            ACCOUNT_ID="${AWS_ACCOUNT_ID:-}"
          fi

          if ! [[ "${ACCOUNT_ID:-}" =~ ^[0-9]{12}$ ]]; then
            echo "‚ùå Could not determine a valid AWS Account ID for ENV=$ENV."
            exit 1
          fi

          echo "env-name=$ENV" >> "$GITHUB_OUTPUT"
          echo "account-id=$ACCOUNT_ID" >> "$GITHUB_OUTPUT"
          echo "Resolved AWS Account ID: $ACCOUNT_ID"

      - name: Notify Slack (üöÄ Starting Deployment)
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"üöÄ *Deployment started* in `${{ steps.resolve.outputs.env-name }}`."}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Configure kubectl via AWS CLI
        run: |
          CLUSTER_NAME=${{ steps.resolve.outputs.env-name }}-dominion-cluster
          aws eks update-kubeconfig --region $AWS_REGION --name "$CLUSTER_NAME"

      - name: Verify EKS Access
        run: |
          kubectl get nodes || {
            echo "‚ùå Unable to authenticate with EKS cluster."
            exit 1
          }

      - name: Install EKS Add-ons
        run: |
          chmod +x eks_addons/script/helm_install.sh eks_addons/script/helm_charts.sh
          ./eks_addons/script/helm_install.sh
          ./eks_addons/script/helm_charts.sh

      - name: Deploy Monitoring and Logging
        run: |
          kubectl apply -k ./eks_addons/monitoring
          kubectl apply -k ./eks_addons/elk

      - name: Update overlay image reference
        run: |
          set -euo pipefail
          ENV="${{ steps.resolve.outputs.env-name }}"
          IMAGE_TAG="${{ needs.build-and-push.outputs.image-tag }}"
          ACCOUNT_ID="${{ steps.resolve.outputs.account-id }}"
          REGION="$AWS_REGION"
          REPO="$ECR_REPO"
          IMAGE_URI="$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$REPO:$IMAGE_TAG"

          FILE=""
          for p in "./k8s/overlays/$ENV/patch-deployment.yaml" \
                   "./fintech-app/k8s/overlays/$ENV/patch-deployment.yaml" \
                   "/fintech-app/k8s/overlays/$ENV/patch-deployment.yaml"; do
            if [ -f "$p" ]; then FILE="$p"; break; fi
          done

          if [ -z "$FILE" ]; then
            echo "‚ùå patch-deployment.yaml not found for ENV=$ENV"
            exit 1
          fi

          echo "üîß Patching $FILE with image: $IMAGE_URI"
          perl -0777 -pe "s|image:\s*[\w\.\-]+\.dkr\.ecr\.[\w-]+\.amazonaws\.com/[\w\.\-]+:[\w\.\-]+|image: $IMAGE_URI|g" -i "$FILE"

          echo "‚úÖ Updated image line:"
          grep -nE 'image:\s' "$FILE" | head -1

      - name: Deploy Application via Kustomize
        run: |
          ENV=${{ steps.resolve.outputs.env-name }}
          OVERLAY_DIR=""
          for d in "./k8s/overlays/$ENV" "./fintech-app/k8s/overlays/$ENV" "/fintech-app/k8s/overlays/$ENV"; do
            if [ -d "$d" ]; then OVERLAY_DIR="$d"; break; fi
          done
          if [ -z "$OVERLAY_DIR" ]; then
            echo "‚ùå Overlay directory for ENV=$ENV not found"
            exit 1
          fi

          echo "üì¶ Applying Kustomize overlay: $OVERLAY_DIR"
          kubectl apply -k "$OVERLAY_DIR"

      - name: Notify Slack (‚úÖ Deploy Success)
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"‚úÖ *Deployment Successful* to `${{ steps.resolve.outputs.env-name }}` by `${{ github.actor }}`."}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack (üî• Deploy Failed)
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"üî• *Deployment FAILED* to `${{ steps.resolve.outputs.env-name }}`."}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}