name: CI-CD Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'prod'
        type: choice
        options:
          - dev
          - staging
          - prod
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-2
  AWS_ACCOUNT_ID: 999568710647
  ECR_REPO: fintech-app

jobs:
  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.set-tag.outputs.image-tag }}

    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Set Image Tag
        id: set-tag
        run: |
          TAG="${{ github.event.inputs.environment || 'prod' }}-$(date +%Y%m%d%H%M%S)"
          echo "image-tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ github.event.inputs.environment || 'prod' }}-GitHubActionsECR
          role-session-name: GitHubActionsSession

      - name: Login to AWS ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
            docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG=${{ steps.set-tag.outputs.image-tag }}
          IMAGE_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$IMAGE_TAG
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

      - name: Notify Slack (‚úÖ Build Success)
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"‚úÖ *Build Succeeded* for `${{ github.workflow }}` by `${{ github.actor }}` in `${{ github.event.inputs.environment || 'prod' }}`."}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack (‚ùå Build Failed)
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"‚ùå *Build Failed* in `${{ github.workflow }}` triggered by `${{ github.actor }}` for `${{ github.event.inputs.environment || 'prod' }}`."}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'prod' }} EKS
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Notify Slack (üöÄ Starting Deployment)
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"üöÄ *Deploying* `${{ github.workflow }}` to `${{ github.event.inputs.environment || 'prod' }}`..." }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Configure kubectl
        uses: aws-actions/eks-setup-kubectl@v1
        with:
          cluster-name: ${{ github.event.inputs.environment || 'prod' }}-eks-cluster
          region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          CLUSTER=${{ github.event.inputs.environment || 'prod' }}-eks-cluster
          aws eks update-kubeconfig --region $AWS_REGION --name "$CLUSTER"

      - name: Install EKS Add-ons
        run: |
          chmod +x eks-addons/script/helm_install.sh eks-addons/script/helm_charts.sh
          ./eks-addons/script/helm_install.sh
          ./eks-addons/script/helm_charts.sh

      - name: Deploy Monitoring and Logging
        run: |
          kubectl apply -k monitoring
          kubectl apply -k elk

      - name: Deploy Application via Kustomize
        run: |
          ENV=${{ github.event.inputs.environment || 'prod' }}
          IMAGE_TAG=${{ needs.build.outputs.image-tag }}

          echo "üîß Deploying to: $ENV"
          echo "üì¶ Using Docker image tag: $IMAGE_TAG"

          sed -i "s|IMAGE_TAG|$IMAGE_TAG|g" overlays/$ENV/patch-deployment.yaml

          kubectl apply -k overlays/$ENV

      - name: Notify Slack (‚úÖ Deploy Success)
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"‚úÖ *Deployment Successful* to `${{ github.event.inputs.environment || 'prod' }}` by `${{ github.actor }}` in `${{ github.workflow }}`."}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack (üî• Deploy Failed)
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"üî• *Deployment FAILED* to `${{ github.event.inputs.environment || 'prod' }}` in `${{ github.workflow }}`."}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

